import math
# Defina a função da equação (a)
def f(x):
    return 2 * x**3 - 6 * x - 1
# Defina a derivada da função (a)
def df(x):
    return 6 * x**2 - 6

# Método de Newton
def newton(f, df, x0, epsilon, max_iter):
    x = x0
    for i in range(max_iter):
        x_anterior = x
        if df(x_anterior) == 0:
            return None, i  # Evitar divisão por zero
        x = x - f(x_anterior) / df(x_anterior)
        erro = abs(x - x_anterior)
        if erro < epsilon:
            return x, i
    return None, max_iter

# Parâmetros
x0 = 2.0  # Valor inicial (alterado para um valor que não cause divisão por zero)
epsilon = 1e-7  # Precisão desejada
max_iter = 100  # Número máximo de iterações

# Resolvendo a equação (a) com o Método de Newton
raiz_newton, iteracoes_newton = newton(f, df, x0, epsilon, max_iter)

# Exibindo resultado do Método de Newton
if raiz_newton is not None:
    print("Método de Newton:")
    print(f"Raiz (Newton): {raiz_newton}, Iterações: {iteracoes_newton}")
else:
    print("Não foi possível encontrar uma raiz dentro do limite de iterações.")
